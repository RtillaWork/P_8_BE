require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/conversations", type: :request do

  # Conversation. As you add validations to Conversation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    aTask = FactoryBot.create(:task)
    aRequestor = aTask.user
    aVolunteer = FactoryBot.create(:user, :volunteer)

    # puts
    # puts 'LET VALID ATTRIBUTES CONVERSATIONS'
    # puts aTask.inspect
    # puts aTask.user.inspect
    # puts
    # puts aVolunteer.inspect
    # puts

    { is_active: true,
      task: aTask,
      # user { nil }
      user: aVolunteer
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    { is_active: true,
      task: FactoryBot.build(:task),
      # user { nil }
      user: nil
    }
  }

  let(:invalid_attributes_own_user_task) {
    aTask = FactoryBot.build(:task)
    aRequestor = aTask.user
    { is_active: true,
      task: aTask,
      # user { nil }
      user: aRequestor
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      conversation = Conversation.create! valid_attributes
      volunteer_auth_token = conversation.user.create_new_auth_token

      get conversations_url, headers: volunteer_auth_token.merge!({ 'HTTP_ACCEPT' => "application/json" })
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      # conversation = Conversation.create! valid_attributes
      conversation = Conversation.create! valid_attributes
      volunteer_auth_token = conversation.user.create_new_auth_token

      get conversation_url(conversation), headers: volunteer_auth_token.merge!({ 'HTTP_ACCEPT' => "application/json" })
      expect(response).to be_successful
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        # skip("Add a hash of attributes valid for your model")
        { is_active: false }
      }

      it "updates the requested conversation" do
        conversation = Conversation.create! valid_attributes
        volunteer_auth_token = conversation.user.create_new_auth_token
        # conversation = Conversation.create! valid_attributes
        patch conversation_url(conversation), params: { conversation: new_attributes }, headers: volunteer_auth_token.merge!({ 'HTTP_ACCEPT' => "application/json" })
        conversation.reload
        # skip("Add assertions for updated state")
        expect(conversation.is_active).to eql(new_attributes[:is_active])
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested conversation" do
      conversation = Conversation.create! valid_attributes
      volunteer_auth_token = conversation.user.create_new_auth_token
      # conversation = Conversation.create! valid_attributes
      expect {
        delete conversation_url(conversation), headers: volunteer_auth_token.merge!({ 'HTTP_ACCEPT' => "application/json" })
      }.to change(Conversation, :count).by(-1)
    end
  end
end
